name: Scale up ECS service with OIDC
on:
 workflow_dispatch: # Manually trigger the workflow
 
permissions:
 id-token: write  # Required for OIDC
 contents: read   # Allows reading repo contents
jobs:
 scale-ecs:
   runs-on: ubuntu-latest
   steps:
   - name: Set up Python
     uses: actions/setup-python@v4
     with:
       python-version: '3.x'
   - name: Install Boto3
     run: |     
       pip install boto3
   - name: Checkout code
     uses: actions/checkout@v2
   - name: Assume AWS Role using OIDC
     id: aws-sts
     uses: aws-actions/configure-aws-credentials@v3
     with:
       role-to-assume: arn:aws:iam::739275441922:role/Sourabh-OpenID
       aws-region: 'us-east-1'  # Specify your AWS region


   - name: Run ECS Check
     run: |
       pwd
       ls -la
       python check_ecs.py --cluster_name TRFunctionalAPI

   - name: Run ECS Service Scaling
     run: python scale_ecs_service.py --cluster_name TRFunctionalAPI --service_name nginx_datadog --desired_count 1
   
  # - name: Check for Running Containers in ECS Cluster
  #   id: check-ecs
  #   run: |
  #    CLUSTER_NAME="TRFunctionalAPI"  # Replace with your ECS cluster name
  #    RUNNING_TASKS=$(aws ecs list-tasks --cluster $CLUSTER_NAME --desired-status RUNNING --query 'taskArns' --output text)
  #    if [ -n "$RUNNING_TASKS" ]; then
  #    echo "ECS tasks are currently running in $CLUSTER_NAME. Exiting..."
  #    exit 1  # Exit the workflow if containers are running
  #    else
  #    echo "No running ECS tasks found. Proceeding..."
  #    fi
      
  # - name: Scale ECS service
  #   run: |
  #     aws ecs update-service \
  #     --cluster TRFunctionalAPI \
  #     --service nginx-datadog \
  #     --desired-count 1
