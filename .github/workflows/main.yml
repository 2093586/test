name: Scale up ECS service with OIDC
on:
 workflow_dispatch: # Manually trigger the workflow
 
permissions:
 id-token: write  # Required for OIDC
 contents: read   # Allows reading repo contents
jobs:
 scale-ecs:
   runs-on: ubuntu-latest
   steps:
   - name: Set up Python
     uses: actions/setup-python@v4
     with:
       python-version: '3.x'
   - name: Install Boto3
     run: |     
       pip install boto3
#- name: Checkout code
#uses: actions/checkout@v2
   - name: Assume AWS Role using OIDC
     id: aws-sts
     uses: aws-actions/configure-aws-credentials@v3
     with:
       role-to-assume: arn:aws:iam::739275441922:role/Sourabh-OpenID
       aws-region: 'us-east-1'  # Specify your AWS region

   - name: Add Python Script
     run: |
           echo "Writing Python script..."
           echo '
           import boto3
           import sys
 
           def check_ecs_running_tasks(cluster_name):
               ecs_client = boto3.client("ecs")
               response = ecs_client.list_tasks(
                   cluster=cluster_name,
                   desiredStatus="RUNNING"
               )
               running_tasks = response.get("taskArns", [])
               if running_tasks:
                   print(f"Running tasks found: {running_tasks}")
                   sys.exit(1)
               else:
                   print("No running tasks found.")
                 
 
           if __name__ == "__main__":
               cluster_name = "TRFunctionalAPI"
               check_ecs_running_tasks(cluster_name)
           ' > check_ecs.py
 
   - name: Run ECS Check
     run: python check_ecs.py

   - name: Add Python Script for Scaling ECS Service
     run: |
             echo "Writing Python script to scale ECS service..."
             echo '
             import boto3
             import sys
   
             def scale_ecs_service(cluster_name, service_name, desired_count):
                 ecs_client = boto3.client("ecs")
                 try:
                     response = ecs_client.update_service(
                         cluster=cluster_name,
                         service=service_name,
                         desiredCount=desired_count
                     )
                     print(f"Successfully scaled service {service_name} to {desired_count}.")
                 except Exception as e:
                     print(f"Failed to scale service: {str(e)}")
                     sys.exit(1)
   
             if __name__ == "__main__":
                 cluster_name = "TRFunctionalAPI"
                 service_name = "nginx-datadog"
                 desired_count = 1
                 scale_ecs_service(cluster_name, service_name, desired_count)
             ' > scale_ecs_service.py
   
   - name: Run ECS Service Scaling
     run: python scale_ecs_service.p
   
  # - name: Check for Running Containers in ECS Cluster
  #   id: check-ecs
  #   run: |
  #    CLUSTER_NAME="TRFunctionalAPI"  # Replace with your ECS cluster name
  #    RUNNING_TASKS=$(aws ecs list-tasks --cluster $CLUSTER_NAME --desired-status RUNNING --query 'taskArns' --output text)
  #    if [ -n "$RUNNING_TASKS" ]; then
  #    echo "ECS tasks are currently running in $CLUSTER_NAME. Exiting..."
  #    exit 1  # Exit the workflow if containers are running
  #    else
  #    echo "No running ECS tasks found. Proceeding..."
  #    fi
      
  # - name: Scale ECS service
  #   run: |
  #     aws ecs update-service \
  #     --cluster TRFunctionalAPI \
  #     --service nginx-datadog \
  #     --desired-count 1
